今日主要内容：
    1、文件操作 -> open（）
        python操作文件都是以字节的方式进行操作
        f = open(文件路径，mode = "模式",encoding = "编码格式") 最最底层操作的就是bytes
        打开文件时，获取到的是一个文件句柄（文件与程序之间的一个纽带） 而不是文件
        从文件中读取数据：
        相对路径：相当于当前程序所在的文件夹  ../ 上一文件夹 /进入文件夹
        绝对路径：从磁盘根目录去找
    2、mode：
        #r：读取，只读
            读取文件的相关操作：
            1、read（）
                默认：读取文件内容（全部）
                read（n）读取n个字符
            2、readline（）.strip() 读取一行字符 并以strip（）去空白，去除内容两端的空白
                print(f.readline()) 一次性把文件中的内容读取到列表中
                文件句柄是一个可迭代对象,相对来说节省内存
               readlines() 读取全部，返回列表
               （最重要的）for line in f: 每次读取一行内容，读完为止

        #w：写入 只写 但会清空文件，在写入新内容时，会先清空当前文件中的内容
            f = open("胡辣汤"，mode = "w",encoding = "utf-8")  # 可以帮助我们创建文件
        #a：追加 写 也会创建文件 不会清空文件

        r+：就文件而言，他的操作要么是读，要么是写
            读写操作
        w+: 写读操作
        a+：追加写读操作

        所有带b的 处理的都是bytes文件，当处理非文本文件时，
        #rb
        #ab：断点续传
        #wb
        r+b
        w+b
        a+b
    3、文件操作中关于文件句柄的相关操作
        seek（）移动光标
        f.seek（0） 将光标移动到开头，已解决读取后的光标后移问题
        f.seek(0, 2) 第一个参数表示偏移量，第一个为0 表示不动 第二个参数表示从哪个位置开始偏移
        0 表示开头 1 表示当前位置 2 表示结尾
        tell
        返回光标所在的位置

        truncate(参数)
            1、若存在参数，则文件从头截取到该位置
            2、若不存在参数，从头截取到光标    # 此处截取的意思是前边会进行保留，后段会自动删除

    4、实际操作，文件的修改（重点）
        import os
        with open("原文件"，mode = “r”，encoding="utf-8") as f1,\
            open("文件副本"，mode="w",encoding = "utf-8") as f2:
                for line in f1:
                    # 修改
                    f2.write(line)
        os.remove("原文件")
        os.rename("文件副本"，"原文件")
        