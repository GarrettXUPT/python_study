
# def chi(zhushi,fushi,tiandian):
#     print(f"先吃{zhushi}")
#     print(f"再吃{fushi}")
#     print(f"再来点{tiandian}")
# # chi("大米饭","菜","冰淇淋")
# chi(fushi="大米饭",zhushi="菜",tiandian="冰淇淋")

# 在形参位置，* 表示不定参数-接受的是位置参数
# 接收到的位置传参：都是元组
# 形参的顺序（重点）
#  位置参数在前，动态传参内容*在中，默认值在后，动态传参内容**，在最后


# def chi(*food):  # 在形参位置，将传递过来的实参进行了聚合，聚合成了元组
#     print(food)

# chi("小米粥")
# chi("小米粥","咸菜")
# chi("小米粥","油条","葱花饼")


# def func(a,b,c,*arges):   # 若将动态传参内容置于前端，则会将输入值全部打包成元组，如果放在前面，则
#     print(a,b,c,arges)      # 补充其他元素值时，只能通过关键字形式补进去
#
# func(1,2,3,4,5,6,7)  # 1 2 3 (4, 5, 6, 7)  前端正常显示，后端将动态传参内容打包成了元组


# # ** 在形参中表示动态传参，显示的是关键字参数
# # 关键字动态传参，接收到的是字典
# def func(**kwargs):  # 该处也将实参进行聚合，而且将其聚合成字典
#     print(kwargs)
#
# # func(1,2,3,4,5,6)  # 该种形式是位置参数，会报错
#
# func(a = 1,b = 2,c = 3,haha = "呵呵")  # 以字典形式输出

# def func(gender = "男", **kwargs):
#     print(gender,kwargs)
#
# func(a = 1, b = 2, c = 3)  # 男 {'a': 1, 'b': 2, 'c': 3}  默认值生效，该种形式是合法的



# 无敌传参
def func(*args,**kwargs): # 该种形式设置形参，对参数没有限制
    print(args,kwargs)

func(1,2,3,4,a = 1,b = 2,c = 3,d = 4)  # (1, 2, 3, 4) {'a': 1, 'b': 2, 'c': 3, 'd': 4}

# 该处为形参，在形参位置表示聚合
def chi(*food):
    print(food)

lst = ["胡萝卜","大头菜","你猜猜"]

# 该处是实参，在实参位置写*是打散
chi(*lst)  #('胡萝卜', '大头菜', '你猜猜')   将列表，元祖，字符串打散成位置参数进行传递，聚合为原组之前，要对传入内容进行迭代
chi(*"你今天吃了些什么") # ('你', '今', '天', '吃', '了', '些', '什', '么')
chi("真的什么都可以吗", 123, "好像是")