
# lst = ["光头强","熊大","熊二","hello","2315",["周杰伦","王力宏"],(),{}]
# 列表里可以放任何元素 也允许列表嵌套列表
lst = ["天龙八部","奥特曼","你猜猜","我不猜"]
# print(lst[2]) # 你猜猜
print(lst[-2]) # 你猜猜
# print(lst[1:3]) # ['奥特曼', '你猜猜']  切片 ：原来是什么类型，切出来还是什么类型，即列表返回的是切割以后的列表
# print(lst[1::2]) # ['奥特曼', '我不猜']

# 列表的增加

# append 表示追加，将添加的内容，放在列表最后
# lst.append("我就不猜") # 列表不需要将其存储在一个变量上 而是由此直接添加
# print(lst) # ['天龙八部', '奥特曼', '你猜猜', '我不猜', '我就不猜']

# insert（位置，元素） 表示插入
# lst.insert(1, "情敌") 在索引为1的位置，添加情敌
# print(lst ) # ['天龙八部', '情敌', '奥特曼', '你猜猜', '我不猜']

# 在一般情况而言，append要比 insert 效率要高，append直接追加在列表后边，而insert要插入可能要移动元素

# lst.extend("胡辣汤") # 表示迭代添加 ['天龙八部', '奥特曼', '你猜猜', '我不猜', '胡', '辣', '汤']
# lst.extend(["胡辣汤","猪头肉"]) # ['天龙八部', '奥特曼', '你猜猜', '我不猜', '胡辣汤', '猪头肉']
# print(lst)                 # 将传递进去的参数进行迭代，把每一项都添加到列表的末尾，此处迭代，指的是迭代一层进行添加操作


# 列表的删除
# lst = ["天龙八部","奥特曼","你猜猜","我不猜"]

# pop() 默认从后往前删
# lst.pop()
# print(lst) # ['天龙八部', '奥特曼', '你猜猜']
# pop(索引) 按照索引位置去删
# lst.pop(2)
# print(lst) # ['天龙八部', '奥特曼', '我不猜']

# remove()
#lst.remove("天龙八部") # 将其中指定元素删除，若其中不存在该元素，则会报错  ['奥特曼', '你猜猜', '我不猜']

# del lst[1] # 利用切片或者索引删除 # ['天龙八部', '你猜猜', '我不猜']

# lst.clear() # 清空整个列表 []
# print(lst)





lst = ["天龙八部","奥特曼","你猜猜","我不猜"]
# lst[3] = "别猜了"  # 通过索引进行修改，索引值不能超出范围
# lst[1:3] = "别说话"  # 通过切片进行修改，迭代更新，不常用 ['天龙八部', '别', '说', '话', '我不猜']
# lst[1:3] = ["咋还猜了"] # ['天龙八部', '咋还猜了', '我不猜']
# lst[0:3:2] = ["你干啥","删也不敢"] # 选中的位置有两个但是位置只有一个，会报错，需要与空位相匹配 ['你干啥', '奥特曼', '删也不敢', '我不猜']
# print(lst)

# 查询 ： 列表为可迭代对象
for item in lst:
    print(item) # item 为list中的每一项
