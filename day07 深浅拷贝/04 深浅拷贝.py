# # 从上到下只有一个列表被创建
# lst1 = ["胡辣汤","油泼面","麻辣香锅","灌汤包"] # 先产生列表 再产生左侧的地址
# lst2 = lst1  # 只是把列表1的地址赋值给了列表2，指向的是同一个对象
# print(id(lst1),id(lst2))

# lst1 = ["胡辣汤","油泼面","麻辣香锅","灌汤包"] # 先产生列表 再产生左侧的地址
# lst2 = lst1.copy()  # 使用该中方法进行复制（拷贝），可以创建新的对象,产生了新的列表，与原来一模一样
# # 该种方法叫做浅拷贝，只拷贝表面
# print(id(lst1),id(lst2))
#
# lst1.append("葫芦娃")
# print(lst1,lst2)  两个都会增加，因为两个变量指向的是同一个地址

# lst1 = ["胡辣汤","油泼面","麻辣香锅","灌汤包",["长白山","白洋淀","云冈石窟"]] # 先产生列表 再产生左侧的地址
# lst2 = lst1.copy() # 浅拷贝 只拷贝第一层内容
# print(id(lst1),id(lst2))
# lst1[4].append("葫芦娃")
# print(lst1,lst2)
# # ['胡辣汤', '油泼面', '麻辣香锅', '灌汤包', ['长白山', '白洋淀', '云冈石窟', '葫芦娃']]
# # ['胡辣汤', '油泼面', '麻辣香锅', '灌汤包', ['长白山', '白洋淀', '云冈石窟', '葫芦娃']]


# 深拷贝写法
import copy
lst1 = ["胡辣汤","油泼面","麻辣香锅","灌汤包",["长白山","白洋淀","云冈石窟"]] # 先产生列表 再产生左侧的地址
lst2 = copy.deepcopy(lst1) # 深拷贝(深度克隆)：原型复制 对象内部的所有元素都要拷贝
print(id(lst1),id(lst2))
lst1[4].append("葫芦娃")
print(lst1,lst2)
# ['胡辣汤', '油泼面', '麻辣香锅', '灌汤包', ['长白山', '白洋淀', '云冈石窟', '葫芦娃']]
# ['胡辣汤', '油泼面', '麻辣香锅', '灌汤包', ['长白山', '白洋淀', '云冈石窟']]

# 为什么要有深浅拷贝？
# 提高创建对象的速度
# 计算机中最慢的就是分配对象，因为创建对象需要分配内存
# 最快的方式就是二进制流的形式进行复制，速度最快
